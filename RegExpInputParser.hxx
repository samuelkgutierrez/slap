/**
 * Copyright (c) 2013 Samuel K. Gutierrez All rights reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef REGEXP_INPUT_PARSER_INCLUDED
#define REGEXP_INPUT_PARSER_INCLUDED

#include "AlphabetSymbol.hxx"
#include "ExpNode.hxx"
#include "NFA.hxx"

#include <string>
#include <stack>

class RegExpInputParser {
private:
    bool beVerbose;
    /* buffer that holds input text */
    char *cInputStr;
    /* C string that holds the re text */
    char *cRegExpStr;
    /* the alphabet generated by an alphabet parse */
    AlphabetString alphabet;

    ExpNode *reTree;

    ExpNode *parse(std::stack<std::string> &tokVec);

    NFA reTreeToNFA(ExpNode *root);

    std::stack<std::string> cStrToTokVec(char *cStr);

protected:

public:
    RegExpInputParser(const std::string &fileToParse,
                      const AlphabetString &alpha);

    void parse(void);

    void echoAlphabet(void);

    void verbose(bool beVerbose);

    NFA getNFA(void);
};

#endif
